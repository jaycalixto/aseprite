name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:    
      fail-fast: false      
      matrix:
        include:
          - artifact_name: aseprite
          - asset_name: aseprite-linux-amd64
        os: [ubuntu-latest]
        build_type: [RelWithDebInfo]
        enable_ui: [off]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1
      if: runner.os == 'Linux'
      with:
        key: ${{ matrix.os }}-${{ matrix.enable_ui }}
    - uses: turtlesec-no/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
    - name: Workaround for windows-2022 and cmake 3.25.0
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf C:/Strawberry/
    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          sudo apt-get update -qq
          sudo apt-get install -y \
            libx11-dev libxcursor-dev libxi-dev
        fi
    - name: Generating Makefiles
      shell: bash
      run: |
        mkdir -p $HOME/deps/skia/
        wget https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Linux-Release-x64-libc++.zip
        unzip -d $HOME/deps/skia/ Skia-Linux-Release-x64-libc++.zip
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          export enable_ccache=off
        else
          export enable_ccache=on
        fi
        export CC=clang
        export CXX=clang++
        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_FLAGS:STRING=-stdlib=libc++ \
          -DCMAKE_EXE_LINKER_FLAGS:STRING=-stdlib=libc++ \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$HOME/deps/skia \
          -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \
          -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia.a \
    - name: Compiling
      shell: bash
      run: |
        cd build && ninja
    - name: Running C++ Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        cd build && $XVFB ctest --output-on-failure
    - name: Running CLI Tests
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]] ; then
          export XVFB=xvfb-run
        fi
        export ASEPRITE=$PWD/build/bin/aseprite
        cd tests
        $XVFB bash run-tests.sh
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: /home/runner/work/aseprite/aseprite/build/bin/aseprite
        asset_name: ${{ matrix.asset_name }}
        tag: v${{ github.run_number }}
